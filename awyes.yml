# # -------------------------------------------------------------------
# # roles
# # -------------------------------------------------------------------

movienight_role:
  get_role:
    client: iam
    depends_on:
      - movienight_role.create_role
    workflow:
      - init
    args:
      RoleName: movienight
  create_role:
    client: iam
    workflow:
      - init
    args:
      RoleName: movienight
      Description: Role for movienight
      AssumeRolePolicyDocument: >
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { 
              "Service": [
                "lambda.amazonaws.com", 
                "rds.amazonaws.com"
              ] 
            },
            "Action": "sts:AssumeRole"
          }]
        }

movienight_role_attach_rds:
  attach_role_policy:
    client: iam
    workflow:
      - init
    depends_on:
      - movienight_role.get_role
    args:
      RoleName: movienight
      PolicyArn: arn:aws:iam::aws:policy/AmazonRDSFullAccess

movienight_role_attach_cloudwatch:
  attach_role_policy:
    client: iam
    workflow:
      - init
    depends_on:
      - movienight_role.get_role
    args:
      RoleName: movienight
      PolicyArn: arn:aws:iam::aws:policy/CloudWatchFullAccess

# # -------------------------------------------------------------------
# # rds
# # -------------------------------------------------------------------

movienight_rds:
  create_db_instance:
    client: rds
    workflow:
      - init
    args:
      AllocatedStorage: 5
      DBInstanceClass: "db.t2.micro"
      DBName: "movienight"
      DBInstanceIdentifier: movienight_rds
      Engine: "MySQL"
      MasterUsername: "username"
      MasterUserPassword: "password"
  delete_db_instance:
    client: rds
    workflow:
      - delete
    args:
      DBInstanceIdentifier: movienight_rds
      DeleteAutomatedBackups: true
      SkipFinalSnapshot: true

# # -------------------------------------------------------------------
# # repos
# # -------------------------------------------------------------------

movienight_repo:
  list_images:
    client: ecr
    workflow:
      - release
    depends_on:
      - movienight_repo.create_repository
    args:
      repositoryName: movienight_repo
  batch_delete_image:
    client: ecr
    depends_on:
      - movienight_repo.list_images
    workflow:
      - release
    args:
      repositoryName: movienight_repo
      imageIds: $(movienight_repo.list_images.imageIds)
  create_repository:
    client: ecr
    workflow:
      - init
    args:
      repositoryName: movienight_repo
  delete_repository:
    client: ecr
    workflow:
      - delete
    args:
      repositoryName: movienight_repo
      force: true

# # -------------------------------------------------------------------
# # lambdas
# # -------------------------------------------------------------------

movienight_lambda_query:
  get_function:
    client: lambda
    depends_on:
      - movienight_lambda_query.create_function
    workflow:
      - release
      - init
    args:
      FunctionName: movienight_lambda_query
  create_function:
    client: lambda
    depends_on:
      - movienight_role.get_role
      - movienight_image_query.push
    workflow:
      - init
    args:
      Timeout: 900
      MemorySize: 10240
      FunctionName: movienight_lambda_query
      Role: $(movienight_role.get_role.Role.Arn)
      PackageType: Image
      EphemeralStorage:
        Size: 10240
      ImageConfig:
        Command:
          - lambda.handler
      Code:
        ImageUri: >-
          718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo@$(movienight_image_query.push.-1.aux.Digest)
  update_function_code:
    client: lambda
    depends_on:
      - movienight_lambda_query.get_function
    workflow:
      - release
    args:
      FunctionName: movienight_lambda_query
      ImageUri: >-
        718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo@$(movienight_image_query.push.-1.aux.Digest)
  delete_function:
    client: lambda
    workflow:
      - delete
    args:
      FunctionName: movienight_lambda_query
  invoke:
    client: lambda
    workflow:
      - run
    args:
      FunctionName: movienight_lambda_query

movienight_lambda_init:
  get_function:
    client: lambda
    depends_on:
      - movienight_lambda_init.create_function
    workflow:
      - release
      - init
    args:
      FunctionName: movienight_lambda_init
  create_function:
    client: lambda
    depends_on:
      - movienight_role.get_role
      - movienight_image_init.push
    workflow:
      - init
    args:
      Timeout: 900
      MemorySize: 10240
      FunctionName: movienight_lambda_init
      Role: $(movienight_role.get_role.Role.Arn)
      PackageType: Image
      EphemeralStorage:
        Size: 10240
      ImageConfig:
        Command:
          - lambda.handler
      Code:
        ImageUri: >-
          718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo@$(movienight_image_init.push.-1.aux.Digest)
  put_function_concurrency:
    client: lambda
    depends_on:
      - movienight_lambda_init.get_function
    workflow:
      - init
    args:
      FunctionName: movienight_lambda_init
      ReservedConcurrentExecutions: 1
  update_function_code:
    client: lambda
    depends_on:
      - movienight_lambda_init.get_function
    workflow:
      - release
    args:
      FunctionName: movienight_lambda_init
      ImageUri: >-
        718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo@$(movienight_image_init.push.-1.aux.Digest)
  describe_rule:
    client: events
    depends_on:
      - movienight_lambda_init.put_rule
    workflow:
      - init
    args:
      Name: movienight_lambda_init_event
  put_rule:
    client: events
    workflow:
      - init
    args:
      Name: movienight_lambda_init_event
      ScheduleExpression: rate(1 day)
      Description: Cron to trigger db refresh
  delete_rule:
    client: events
    workflow:
      - delete
    depends_on:
      - movienight_lambda_init.remove_targets
    args:
      Name: movienight_lambda_init_event
      Force: true
  put_targets:
    client: events
    workflow:
      - init
    depends_on:
      - movienight_lambda_init.get_function
    args:
      Rule: movienight_lambda_init_event
      Targets:
        - Id: movienight_lambda_init
          Arn: $(movienight_lambda_init.get_function.Configuration.FunctionArn)
  remove_targets:
    client: events
    workflow:
      - delete
    args:
      Rule: movienight_lambda_init_event
      Ids:
        - movienight_lambda_init
      Force: true
  add_permission:
    client: lambda
    workflow:
      - init
    depends_on:
      - movienight_lambda_init.describe_rule
    args:
      FunctionName: movienight_lambda_init
      SourceArn: $(movienight_lambda_init.describe_rule.Arn)
      StatementId: $(movienight_lambda_init.describe_rule.Name)
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  delete_function:
    client: lambda
    workflow:
      - delete
    args:
      FunctionName: movienight_lambda_init
  invoke:
    client: lambda
    workflow:
      - run
    args:
      FunctionName: movienight_lambda_init

# # -------------------------------------------------------------------
# # api
# # -------------------------------------------------------------------
movienight_http_api:
  create_api:
    client: apigatewayv2
    workflow:
      - init
    args:
      Name: movienight_http_api
      ProtocolType: HTTP
  get_apis:
    client: apigatewayv2
    depends_on:
      - movienight_http_api.create_api
    workflow:
      - delete
      - release
  filter_by_api_name:
    client: user
    depends_on:
      - movienight_http_api.get_apis
    workflow:
      - delete
      - release
      - init
    args:
      apis: $(movienight_http_api.get_apis.Items)
      key: Name
      val: movienight_http_api
  delete_api:
    client: apigatewayv2
    depends_on:
      - movienight_http_api.filter_by_api_name
    workflow:
      - delete
    args:
      ApiId: $(movienight_http_api.filter_by_api_name.ApiId)

movienight_query_movies:
  create_route:
    client: apigatewayv2
    depends_on:
      - movienight_query_movies.create_integration
      - movienight_lambda_query.get_function
    workflow:
      - init
      - release
    args:
      ApiId: $(movienight_http_api.filter_by_api_name.ApiId)
      RouteKey: GET /movies
      Target: integrations/$(movienight_query_movies.create_integration.IntegrationId)
  create_integration:
    client: apigatewayv2
    depends_on:
      - movienight_http_api.filter_by_api_name
      - movienight_http_api.create_api
      - movienight_lambda_query.get_function
    workflow:
      - init
      - release
    args:
      ApiId: $(movienight_http_api.filter_by_api_name.ApiId)
      IntegrationType: AWS_PROXY
      IntegrationMethod: GET
      IntegrationUri: $(movienight_lambda_query.get_function.Configuration.FunctionArn)
      PayloadFormatVersion: "2.0"

# # -------------------------------------------------------------------
# # docker
# # -------------------------------------------------------------------

movienight_docker_credentials:
  get_ecr_password:
    client: awyes
    secret: True
    workflow:
      - init
      - release

movienight_image_init:
  build:
    client: docker.images
    workflow:
      - init
      - release
    args:
      tag: 718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo:init
      path: db
      dockerfile: Dockerfile
  push:
    client: docker.images
    depends_on:
      - movienight_docker_credentials.get_ecr_password
      - movienight_image_init.build
      - movienight_repo.batch_delete_image
    workflow:
      - init
      - release
    args:
      repository: 718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo
      tag: init
      auth_config:
        username: AWS
        password: $(movienight_docker_credentials.get_ecr_password)
      decode: true
      stream: true

movienight_image_query:
  build:
    client: docker.images
    workflow:
      - init
      - release
    args:
      tag: 718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo:query
      path: server
      dockerfile: Dockerfile
  push:
    client: docker.images
    depends_on:
      - movienight_docker_credentials.get_ecr_password
      - movienight_image_query.build
      - movienight_repo.batch_delete_image
    workflow:
      - init
      - release
    args:
      repository: 718734850255.dkr.ecr.us-west-2.amazonaws.com/movienight_repo
      tag: query
      auth_config:
        username: AWS
        password: $(movienight_docker_credentials.get_ecr_password)
      decode: true
      stream: true
